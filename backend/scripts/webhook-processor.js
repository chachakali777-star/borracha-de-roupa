const axios = require('axios');
const User = require('../models/User');

// URL do webhook.site para monitorar
const WEBHOOK_URL = 'https://webhook.site/35926974-aea8-4a50-ab57-b62ccd47a2d9';

// Fun√ß√£o para processar webhook da Nitro Pay
async function processWebhook(webhookData) {
  try {
    console.log('üîî Webhook recebido:', JSON.stringify(webhookData, null, 2));
    
    const { hash, payment_status, amount, customer } = webhookData;
    
    if (payment_status === 'approved') {
      console.log('‚úÖ Pagamento aprovado, processando tokens...');
      
      // Buscar usu√°rio pelo email
      const user = User.findByEmail(customer.email);
      if (user) {
        console.log('üë§ Usu√°rio encontrado:', user.email);
        
        // Calcular tokens baseado no valor pago
        let tokensToAdd = 0;
        const amountInReais = amount / 100;
        
        console.log('üí∞ Valor pago:', amountInReais, 'reais');
        
        if (amountInReais === 5) tokensToAdd = 25;      // Pacote de teste
        else if (amountInReais === 10) tokensToAdd = 100;
        else if (amountInReais === 30) tokensToAdd = 500;
        else if (amountInReais === 60) tokensToAdd = 1000;
        else if (amountInReais === 100) tokensToAdd = 2000;
        else {
          // Fallback: 1 token = R$ 0,33
          tokensToAdd = Math.floor(amountInReais / 0.33);
        }
        
        console.log('üéØ Tokens a adicionar:', tokensToAdd);
        console.log('üìä Tokens atuais do usu√°rio:', user.tokens);
        
        // Atualizar tokens do usu√°rio
        const updatedUser = User.updateTokens(user.id, user.tokens + tokensToAdd);
        
        console.log(`‚úÖ SUCESSO! Usu√°rio ${user.email} recebeu ${tokensToAdd} tokens. Total: ${updatedUser.tokens}`);
        
        return {
          success: true,
          message: `Tokens adicionados com sucesso! ${tokensToAdd} tokens creditados.`,
          tokensAdded: tokensToAdd,
          totalTokens: updatedUser.tokens
        };
      } else {
        console.log('‚ùå Usu√°rio n√£o encontrado:', customer.email);
        return {
          success: false,
          message: 'Usu√°rio n√£o encontrado'
        };
      }
    } else {
      console.log('‚è≥ Status do pagamento:', payment_status);
      return {
        success: false,
        message: `Pagamento com status: ${payment_status}`
      };
    }
  } catch (error) {
    console.error('‚ùå Erro ao processar webhook:', error);
    return {
      success: false,
      message: 'Erro ao processar webhook'
    };
  }
}

// Fun√ß√£o para monitorar webhook.site (simula√ß√£o)
async function monitorWebhook() {
  console.log('üîç Monitorando webhook.site...');
  console.log('üì° URL:', WEBHOOK_URL);
  console.log('‚è∞ Verifique o webhook.site manualmente ap√≥s fazer um pagamento');
  console.log('üìã Copie os dados do webhook e cole aqui para processar');
}

// Exportar fun√ß√µes
module.exports = {
  processWebhook,
  monitorWebhook
};

// Se executado diretamente
if (require.main === module) {
  monitorWebhook();
}
